Q1 of 4
Which one below is the example of Method reference?

list.forEach(System.out::println);
list.forEach(System.out::println());
list.forEach(System.out.println());
list.forEach(System.out->println);




Q2 of 4
What will be the output of the code given below if value1 is 3 and value2 is 29.0?

BiPredicate<Integer, Integer> func3 = (value1, value2) -> value1 * value1 * value1 > value2; //Line1
System.out.println(func3.test(value1, value2));

True
False
Error because of type mismatch
Error at Line 1 as we cannot execute more than 1 operation in a single Functional Interface line




Q3 of 4
What will be the output of the code given below?

@FunctionalInterface
interface Interface1 {
	int command(int x, int y);
}
@FunctionalInterface
interface Interface2 {
	void sayMessage(String myString);
}
public class Tester {
  private int operate(int x, int y, Interface1 functionalObject) {
	return functionalObject.command(x, y);
  }
  public static void main(String args[]) {
	Interface1 addition = (int a, int b) -> a + b;
	Interface1 multiplication = (int a, int b) -> a * b;
	Tester tobj = new Tester();

	System.out.println("Addition of 6 and 3 is: " + tobj.operate(6, 3, addition));
	System.out.println("Multiplication of 6 and 3 is: " + tobj.operate(6, 3, multiplication));
	Interface2 fobj = myString -> System.out.println("Hello " + myString);
	fobj.sayMessage("Infosys");
  }
}
 

Addition of 6 and 3 is: 9 Multiplication of 6 and 3 is: 18 Hello Infosys
Unknown Exception will be thrown.
Invalid interface usage Exception will be thrown as we cannot use same functional interface for more than 1 purpose at one time.



Q4 of 4
Which of the following are valid lambda expressions to sort the numbers in numberList in descending order? (Choose 3)

numberList.sort((Integer x, Integer y) -> -x.compareTo(y));
numberList.sort(Integer x, Integer y -> y.compareTo(x));
numberList.sort((x, y) -> y.compareTo(x));
numberList.sort((x, y) -> { return -x.compareTo(y); });




